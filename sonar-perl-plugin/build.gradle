plugins {
    id "java-library"
    id "eclipse"
    id 'com.bmuschko.docker-remote-api' version '3.0.7'
    id "jacoco"
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

repositories {
    mavenCentral()
}

ext {
    sonarApiVersion = '6.7'
}

dependencies {
    compileOnly "org.sonarsource.sonarqube:sonar-plugin-api:${sonarApiVersion}"
    testCompile "org.sonarsource.sonarqube:sonar-plugin-api:${sonarApiVersion}"
    compile 'org.apache.commons:commons-compress:1.14'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.12'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'org.mockito:mockito-core:2.23.4'
    compile project(':perl-frontend')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

jacoco {
    toolVersion = '0.7.9'
}

jar {
    manifest {
        attributes "Build-Jdk": System.getProperty('java.version'),
                   "Build-Time": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                   "Plugin-BuildDate": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                   'Plugin-Key': 'perl',
                   'Plugin-Name': 'Perl',
                   'Plugin-Version': project.version,
                   'Plugin-Class': 'com.github.sonarperl.PerlPlugin',
                   "Plugin-Description": 'There is more than one camel to do it.',
                   "Plugin-Developers": 'Oliver Trosien',
                   "Plugin-Homepage": 'https://github.com/sonar-perl/sonar-perl',
                   "Plugin-IssueTrackerUrl": 'https://github.com/sonar-perl/sonar-perl/issues',
                   "Plugin-License": 'Apache',
                   "Plugin-Organization": 'sonar-perl',
                   "Plugin-OrganizationUrl": 'https://github.com/sonar-perl/',
                   "Plugin-SourcesUrl": 'https://github.com/sonar-perl/sonar-perl',
                   "Plugin-TermsConditionsUrl": 'https://github.com/sonar-perl/sonar-perl',
                   "Sonar-Version": project.ext.sonarApiVersion
    }
}

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp","https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

task copyDockerfile (type: Copy) {
    group = 'Docker'
    description = 'Copies the Dockerfile into its target directory.'
    from 'Dockerfile'
    into 'build/docker'
}

task copyDockerTargetArtifacts(type: Copy) {
    group = 'Docker'
    description = 'Assembles contents for docker image.'
    dependsOn copyDockerfile, shadowJar
    from "build/libs/"
    into "build/docker/build/libs/"
}

task buildDockerImage(type: DockerBuildImage) {
    description = 'Builds a new docker image.'
    dependsOn copyDockerTargetArtifacts
    inputDir = file('build/docker')
    tag = "sonarperl/sonar-perl:latest"
    noCache = true
}

task createDockerContainer(type: DockerCreateContainer) {
    dependsOn buildDockerImage
    targetImageId { buildDockerImage.getImageId() }
    portBindings = [ '9000:9000', '9002:9002' ]
}

publish.dependsOn(createDockerContainer)

task startDockerContainer(type: DockerStartContainer) {
    dependsOn createDockerContainer
    targetContainerId { createDockerContainer.getContainerId() }
    doLast {
        println createDockerContainer.getContainerId()
    }
}

task run {}
run.dependsOn(startDockerContainer)

task stopDockerContainer(type: DockerStopContainer) {
    targetContainerId { createDockerContainer.getContainerId() }
}

task stop {}
stop.dependsOn stopDockerContainer

task removeDockerImage (type:DockerRemoveImage) {
    description = 'Removes the docker image from the local filesystem.'
    imageId 'sonarperl/sonar-perl:latest'
}

